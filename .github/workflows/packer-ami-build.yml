name: Packer AMI Build CI

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: "Create env file"
        run: |
          touch .env
          echo PGDATABASE=${{ secrets.DATABASE }} >> .env
          echo PGUSER=${{ secrets.DBUSER }} >> .env
          echo PGPASSWORD=${{ secrets.DBPASSWORD }} >> .env
          echo POSTGRES_PORT=${{ secrets.DBPORT }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo PGHOST=${{ secrets.HOSTNAME }} >> .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  

      - name: Build application artifact
        run: |
          mkdir artifacts
          zip -r artifacts/webapp.zip . -x "*.git*"

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Run Packer init
        run: packer init ./packer-ami

      # - name: Build Packer AMI
      #   run: packer build --var-file=./packer-ami/variables.pkrvars.hcl ./packer-ami/packer.pkr.hcl

      - name: Get Latest AMI ID
        id: get-ami
        run: | 
          latest_ami=$(aws ec2 describe-images --filters "Name=name,Values=debian_*" --query 'sort_by(Images, &CreationDate)[0].Name')
          echo "AMI_ID=${latest_ami}" >> $GITHUB_ENV
          echo "Latest AMI ID: $latest_ami"
          echo "::set-output name=ami_id::$latest_ami" 
        
          
        # run: echo "::set-output name=ami_id::$(pulumi stack output amiId)"

      - name: Configure AWS Credentials for Autoscaling Group
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Create Launch Template version
      #   id: create-lt-version
      #   run: |
      #     # Your script/command to create a new Launch Template version with the latest AMI ID
      #     # For example, using AWS CLI:
      #       aws ec2 create-launch-template-version \
      #       --launch-template-name webAppLaunchTemplate-7a4adb4 \
      #       --version-description "New version with latest AMI" \
      #       --source-version ${{ env.AMI_ID }} \
      #       --output text
      #     echo "Launch Template version created"

      - name: Get Launch Template Latest Version
        id: get-lt-version
        run: |
          version=$(aws ec2 describe-launch-template-versions --launch-template-name webAppLaunchTemplate-7a4adb4 --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
          echo "::set-output name=lt_version::$version"

      # - name: Refresh Auto Scaling Group Instances
      #   run: |
      #     aws autoscaling start-instance-refresh --auto-scaling-group-name webAppAutoScalingGroup --preferences "MinHealthyPercentage=100,InstanceWarmup=300,CheckpointDelay=300"

      # - name: Wait for Instance Refresh to Complete
      #   id: wait-for-refresh
      #   run: |
      #     while true; do
      #       status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webAppAutoScalingGroup --query 'InstanceRefreshes[0].Status' --output text)
      #       if [ "$status" == "Successful" ]; then
      #         echo "Instance refresh completed successfully."
      #         exit 0
      #       elif [ "$status" == "Failed" ]; then
      #         echo "Instance refresh failed."
      #         exit 1
      #       else
      #         echo "Instance refresh still in progress. Waiting..."
      #         sleep 60
      #       fi
      #     done

      # - name: Cleanup
      #   run: pulumi destroy --skip-preview  